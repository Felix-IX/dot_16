const VRAM_SIZE: usize = 128 * 128;

const PALETTE: [[u8; 4]; 16] = [
    [0x00, 0x00, 0x00, 0xFF],
    [0xFF, 0x00, 0x00, 0xFF],
    [0x00, 0xFF, 0x00, 0xFF],
    [0x00, 0x00, 0xFF, 0xFF],
    [0xFF, 0xFF, 0x00, 0xFF],
    [0xFF, 0x00, 0xFF, 0xFF],
    [0x00, 0xFF, 0xFF, 0xFF],
    [0xFF, 0xFF, 0xFF, 0xFF],
    [0x80, 0x80, 0x80, 0xFF],
    [0x80, 0x00, 0x00, 0xFF],
    [0x00, 0x80, 0x00, 0xFF],
    [0x00, 0x00, 0x80, 0xFF],
    [0x80, 0x80, 0x00, 0xFF],
    [0x80, 0x00, 0x80, 0xFF],
    [0x00, 0x80, 0x80, 0xFF],
    [0x40, 0x40, 0x40, 0xFF],
];

pub fn render_4bit_vram(
    vram: &[u8],
    frame: &mut [u8], // pixels.get_frame()
) {
    let mut pixel_index = 0;

    for byte in vram {
        let lo = byte >> 4;
        let hi = byte & 0x0f;
        if pixel_index < VRAM_SIZE {
            frame[pixel_index * 4..pixel_index * 4 + 4].copy_from_slice(&PALETTE[lo as usize]);
            pixel_index += 1;
        }
        if pixel_index < VRAM_SIZE {
            frame[pixel_index * 4..pixel_index * 4 + 4].copy_from_slice(&PALETTE[hi as usize]);
            pixel_index += 1;
        }
    }
}
